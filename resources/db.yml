Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ${self:provider.region}
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ${self:provider.region}
      MapPublicIpOnLaunch: true
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for RDS Instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS Subnet Group"
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: ${self:custom.RDS.USERNAME}
      MasterUserPassword: ${self:custom.RDS.PASSWORD}
      DBClusterIdentifier: postgres-cluster
      DatabaseName: ${self:custom.RDS.DB_NAME}
      Engine: aurora-postgresql
      EngineVersion: "10.7"
      EngineMode: serverless
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 32
        SecondsUntilAutoPause: 3600
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId

Outputs:
  Subnets:
    Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2 ] ]
  VpcId:
    Value: !Ref VPC
  RDSEndpoint:
    Value:
      !GetAtt RDSCluster.Endpoint.Address
  SecurityGroup:
    Value:
      !GetAtt SecurityGroup.GroupId